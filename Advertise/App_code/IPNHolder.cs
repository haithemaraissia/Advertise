using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

/// <summary>
/// Summary description for IPNHolder
/// </summary>
public class IPNHolder
{



    //_txnID,_txnType, _paymentStatus, _receiverEmail, _itemName, _itemNumber, _quantity, _invoice, _custom,
    //_paymentGross, _payerEmail, _pendingReason, _paymentDate, _paymentFee,_firstName, _lastName, _address, 
    //_city, _state, _zip, _country, _countryCode, _addressStatus, _payerStatus, _payerID, _paymentType, _notifyVersion,
    //_verifySign, _response, _payerPhone, _payerBusinessName, _business, _receiverID, _memo, _tax, _qtyCartItems,
    //_shippingMethod, _shipping;

    public string _txnID;
    public string _txnType;
    public string _paymentStatus;
    public string _receiverEmail;
    public string _itemName;
    public string _itemNumber;
    public string _quantity;
    public string _invoice;
    public string _custom;
    public string _paymentGross;
    public string _payerEmail;
    public string _pendingReason;
    public string _paymentDate;
    public string _paymentFee;
    public string _firstName;
    public string _lastName;
    public string _address;
    public string _city;
    public string _state;
    public string _zip;
    public string _country;
    public string _countryCode;
    public string _addressStatus;
    public string _payerStatus;
    public string _payerID;
    public string _paymentType;
    public string _notifyVersion;
    public string _verifySign;
    public string _response;
    public string _payerPhone;
    public string _payerBusinessName;
    public string _business;
    public string _receiverID;
    public string _memo;
    public string _tax;
    public string _qtyCartItems;
    public string _shippingMethod;
    public string _shipping;

    public string _currency;
    private string _postUrl = "";
    private string _strRequest = "";
    private string _smtpHost;
    private string _fromEmail;
    private string _toEmail;
    private string _fromEmailPassword;

    private string _smtpPort;

    #region "Properties"

    private string PostUrl
    {
        get { return _postUrl; }
        set { _postUrl = value; }
    }

    /// <summary>
    /// This is the reponse back from the http post back to PayPal.
    /// Possible values are "VERIFIED" or "INVALID"
    /// </summary>
    private string Response
    {
        get { return _response; }
        set { _response = value; }
    }

    private string RequestLength
    {
        get { return _strRequest; }
        set { _strRequest = value; }
    }

    /// <summary>
    /// Provide your outgoing email server to use are your SMTP host
    /// </summary>
    public string SmtpHost
    {
        get { return _smtpHost; }
        set { _smtpHost = value; }
    }

    /// <summary>
    /// Provide the port your outgoing SMTP host uses
    /// </summary>
    public string SmtpPort
    {
        get { return _smtpPort; }
        set { _smtpPort = value; }
    }

    /// <summary>
    /// This is the email address that will show to the customer and you. This most likely
    /// needs to be a valid email address that your SMTP server will accept
    /// Examples would be something like no-reply@yourdomain.com
    /// </summary>
    public string FromEmail
    {
        get { return _fromEmail; }
        set { _fromEmail = value; }
    }

    /// <summary>
    /// This is the password that the FromEmail property will use. This needs to be the password
    /// for the email account itself
    /// </summary>
    public string FromEmailPassword
    {
        get { return _fromEmailPassword; }
        set { _fromEmailPassword = value; }
    }

    /// <summary>
    /// This is the email address that you use for yourself. This should be set to
    /// the email that is registered for your PayPal account.
    /// </summary>
    public string ToEmail
    {
        get { return _toEmail; }
        set { _toEmail = value; }
    }

    /// <summary>
    /// Email address or Account ID of the payment recipient.  This is equivalent
    ///  to the value of receiver_email if the payment is sent to the primary account
    /// , which is most cases it is.  This value is that value of what is set in the button html
    /// markup.  This value also get normalized to lowercase when coming back from PayPal
    /// </summary>
    private string Business
    {
        get { return _business; }
        set { _business = value; }
    }


    /// <summary>
    /// Unique transaction ID generated by PayPal. Helpful to use for checking
    ///  against fraud to make sure the transaction hasn't already occured.
    /// </summary>
    private string TXN_ID
    {
        get { return _txnID; }
        set { _txnID = value; }
    }

    /// <summary>
    /// Type of transaction from the customer. Possible values are
    /// "cart", "express_checkout", "send_money", "virtual_terminal", "web-accept"
    /// </summary>
    private string TXN_Type
    {
        get { return _txnType; }
        set { _txnType = value; }
    }

    /// <summary>
    /// This is the status of the payment from the Customer.Possible values are: 
    /// "Canceled_Reversal", "Completed", "Denied", "Expired", "Failed", "Pending",
    ///  "Processed", "Refunded", "Reversed", "Voided"
    /// </summary>
    private string PaymentStatus
    {
        get { return _paymentStatus; }
        set { _paymentStatus = value; }
    }

    /// <summary>
    /// Primary email address of you, the recipient, of the payment.
    /// </summary>
    private string ReceiverEmail
    {
        get { return _receiverEmail; }
        set { _receiverEmail = value; }
    }

    /// <summary>
    /// unique account ID of the payment recipient, which is most likely yourself.
    /// </summary>
    private string ReceiverID
    {
        get { return _receiverID; }
        set { _receiverID = value; }
    }

    /// <summary>
    /// This is the item name passed by yourself or if the customer if you let them enter in an item name
    /// </summary>
    private string ItemName
    {
        get { return _itemName; }
        set { _itemName = value; }
    }

    /// <summary>
    /// This is the item number you set for your own tracking purposes. It is not required by PayPal
    /// so if you didn't set it most likely will come back blank.
    /// </summary>
    private string ItemNumber
    {
        get { return _itemNumber; }
        set { _itemNumber = value; }
    }

    /// <summary>
    /// Quantity of the item ordered by the customer
    /// </summary>
    private string Quantity
    {
        get { return _quantity; }
        set { _quantity = value; }
    }

    /// <summary>
    /// Quantity of the items in the shopping cart from the Customer
    /// </summary>
    private string QuantityCartItems
    {
        get { return _qtyCartItems; }
        set { _qtyCartItems = value; }
    }

    /// <summary>
    /// Invoice number passed by yourself, if you didn't pass it to PayPal then this is omitted.
    /// </summary>
    private string Invoice
    {
        get { return _invoice; }
        set { _invoice = value; }
    }

    /// <summary>
    /// Custom value passed by yourself with the item.
    /// </summary>
    private string Custom
    {
        get { return _custom; }
        set { _custom = value; }
    }

    /// <summary>
    /// Memo entered in by the customer on PayPal website note field
    /// </summary>
    private string Memo
    {
        get { return _memo; }
        set { _memo = value; }
    }

    /// <summary>
    /// Amount of tax charged on the payment
    /// </summary>
    private string Tax
    {
        get { return _tax; }
        set { _tax = value; }
    }

    /// <summary>
    /// Full USD amount of customer's payment before the PayPal fee is subtracted
    /// </summary>
    private string PaymentGross
    {
        get { return _paymentGross; }
        set { _paymentGross = value; }
    }

    /// <summary>
    /// Date Time stamp created by PayPal in the following format: 
    /// HH:MM:SS DD Mmm YY, YYYY PST
    /// </summary>
    private string PaymentDate
    {
        get { return _paymentDate; }
        set { _paymentDate = value; }
    }

    /// <summary>
    /// PayPal's transaction fees associated with purchase.
    /// </summary>
    private string PaymentFee
    {
        get { return _paymentFee; }
        set { _paymentFee = value; }
    }


    /// <summary>
    /// This is the email that the customer used on PayPal or that
    /// is registered with PayPal
    /// </summary>
    private string PayerEmail
    {
        get { return _payerEmail; }
        set { _payerEmail = value; }
    }

    /// <summary>
    /// Customer's phone number
    /// </summary>
    private string PayerPhone
    {
        get { return _payerPhone; }
        set { _payerPhone = value; }
    }

    /// <summary>
    /// Customer's company name if they represent a business
    /// </summary>
    private string PayerBusinessName
    {
        get { return _payerBusinessName; }
        set { _payerBusinessName = value; }
    }

    /// <summary>
    /// This variable is only set if the payment_status=Pending. Possible values are the following:
    /// "address", "authorization", "echeck", "intl", "multi-currency", "unilateral", "upgrade",
    ///  "verify", other"
    /// </summary>
    private string PendingReason
    {
        get { return _pendingReason; }
        set { _pendingReason = value; }
    }

    /// <summary>
    /// This is indicated from what is set in your PayPal profile settings
    /// </summary>
    private string ShippingMethod
    {
        get { return _shippingMethod; }
        set { _shippingMethod = value; }
    }

    /// <summary>
    /// Shipping charges associated with the order.
    /// </summary>
    private string Shipping
    {
        get { return _shipping; }
        set { _shipping = value; }
    }

    /// <summary>
    /// Customer's First Name
    /// </summary>
    private string PayerFirstName
    {
        get { return _firstName; }
        set { _firstName = value; }
    }

    /// <summary>
    /// Customer's Last Name
    /// </summary>
    private string PayerLastName
    {
        get { return _lastName; }
        set { _lastName = value; }
    }

    /// <summary>
    /// Customer's street address
    /// </summary>
    private string PayerAddress
    {
        get { return _address; }
        set { _address = value; }
    }

    /// <summary>
    /// Customer's city
    /// </summary>
    private string PayerCity
    {
        get { return _city; }
        set { _city = value; }
    }

    /// <summary>
    /// Customer state of address
    /// </summary>
    private string PayerState
    {
        get { return _state; }
        set { _state = value; }
    }

    /// <summary>
    /// Zip code of customer's address
    /// </summary>
    private string PayerZipCode
    {
        get { return _zip; }
        set { _zip = value; }
    }

    /// <summary>
    /// Customer's country
    /// </summary>
    private string PayerCountry
    {
        get { return _country; }
        set { _country = value; }
    }

    /// <summary>
    /// Customer's 2 character country code
    /// </summary>
    private string PayerCountryCode
    {
        get { return _countryCode; }
        set { _countryCode = value; }
    }

    /// <summary>
    /// The the address provided is either confirmed or uncomfirmed from PayaPal. Possible values  from PayPal
    /// are going to be "confirmed" or "unconfirmed"
    /// </summary>
    private string PayerAddressStatus
    {
        get { return _addressStatus; }
        set { _addressStatus = value; }
    }

    /// <summary>
    /// Customer either had a verified or unverified account with PayPal. 
    /// Possible return values from PayPal are "verified" or "unverified"
    /// </summary>
    private string PayerStatus
    {
        get { return _payerStatus; }
        set { _payerStatus = value; }
    }

    /// <summary>
    /// Customer's unique ID
    /// </summary>
    private string PayerID
    {
        get { return _payerID; }
        set { _payerID = value; }
    }

    /// <summary>
    /// Type of payment from Customer. Possible values from PayPal are "echeck" and "instant"
    /// </summary>
    private string PaymentType
    {
        get { return _paymentType; }
        set { _paymentType = value; }
    }

    /// <summary>
    /// This is the version number of the IPN that makes the post.
    /// </summary>
    private string NotifyVersion
    {
        get { return _notifyVersion; }
        set { _notifyVersion = value; }
    }

    /// <summary>
    /// An encrypted string that is used to validate the transaction. You don't have to use this for anything
    ///  unless you want to keep it and store it for your records.
    /// </summary>
    private string VerifySign
    {
        get { return _verifySign; }
        set { _verifySign = value; }
    }


    /// <summary>
    /// Full USD amount of customer's payment before the PayPal fee is subtracted
    /// </summary>
    private string Currency
    {
        get { return _currency; }
        set { _currency = value; }
    }
    #endregion


    #region "Fill Properties"

    private void fillProperties()
    {
        this.RequestLength = HttpContext.Current.Request.Form.ToString();
        this.PayerCity = HttpContext.Current.Request.Form["address_city"];
        this.PayerCountry = HttpContext.Current.Request.Form["address_country"];
        this.PayerCountryCode = HttpContext.Current.Request.Form["address_country_code"];
        this.PayerState = HttpContext.Current.Request.Form["address_state"];
        this.PayerAddressStatus = HttpContext.Current.Request.Form["address_status"];
        this.PayerAddress = HttpContext.Current.Request.Form["address_street"];
        this.PayerZipCode = HttpContext.Current.Request.Form["address_zip"];
        this.PayerFirstName = HttpContext.Current.Request.Form["first_name"];
        this.PayerLastName = HttpContext.Current.Request.Form["last_name"];
        this.PayerBusinessName = HttpContext.Current.Request.Form["payer_business_name"];
        this.PayerEmail = HttpContext.Current.Request.Form["payer_email"];
        this.PayerID = HttpContext.Current.Request.Form["payer_id"];
        this.PayerStatus = HttpContext.Current.Request.Form["payer_status"];
        this.PayerPhone = HttpContext.Current.Request.Form["contact_phone"];
        this.Business = HttpContext.Current.Request.Form["business"];
        this.ItemName = HttpContext.Current.Request.Form["item_name"];
        this.ItemNumber = HttpContext.Current.Request.Form["item_number"];
        this.Quantity = HttpContext.Current.Request.Form["quantity"];
        this.ReceiverEmail = HttpContext.Current.Request.Form["receiver_email"];
        this.ReceiverID = HttpContext.Current.Request.Form["receiver_id"];
        this.Custom = HttpContext.Current.Request.Form["custom"];
        this.Memo = HttpContext.Current.Request.Form["memo"];
        this.Invoice = HttpContext.Current.Request.Form["invoice"];
        this.Tax = HttpContext.Current.Request.Form["tax"];
        this.QuantityCartItems = HttpContext.Current.Request.Form["num_cart_items"];
        this.PaymentDate = HttpContext.Current.Request.Form["payment_date"];
        this.PaymentStatus = HttpContext.Current.Request.Form["payment_status"];
        this.PaymentType = HttpContext.Current.Request.Form["payment_type"];
        this.PendingReason = HttpContext.Current.Request.Form["pending_reason"];
        this.TXN_ID = HttpContext.Current.Request.Form["txn_id"];
        this.TXN_Type = HttpContext.Current.Request.Form["txn_type"];
        this.Currency = HttpContext.Current.Request.Form["mc_currency"];
        this.PaymentFee = HttpContext.Current.Request.Form["mc_fee"];
        this.PaymentGross = HttpContext.Current.Request.Form["mc_gross"];
        this.NotifyVersion = HttpContext.Current.Request.Form["notify_version"];
        this.VerifySign = HttpContext.Current.Request.Form["verify_sign"];
    }

    #endregion

    //public double GrossTotal { get; set; }
    //public int InvoiceNumber { get; set; }
    //public string PaymentStatus { get; set; }
    //public string PayerFirstName { get; set; }
    //public double PaymentFee { get; set; }
    //public string BusinessEmail { get; set; }
    //public string PayerEmail { get; set; }
    //public string TxToken { get; set; }
    //public string PayerLastName { get; set; }
    //public string ReceiverEmail { get; set; }
    //public string ItemName { get; set; }
    //public string Currency { get; set; }
    //public string TransactionId { get; set; }
    //public string SubscriberId { get; set; }
    //public string Custom { get; set; }





    public static IPNHolder Parse(string postData)
    {
        String sKey = null;
        String sValue = null;
        IPNHolder ph = new IPNHolder();

        //try
        //{
        //    //split response into string array using whitespace delimeter
        //    String[] StringArray = postData.Split('\n');

        //    // NOTE:
        //    /*
        //    * loop is set to start at 1 rather than 0 because first
        //    string in array will be single word SUCCESS or FAIL
        //    Only used to verify post data
        //    */

        //    // use split to split array we already have using "=" as delimiter
        //    int i;
        //    for (i = 1; i < StringArray.Length - 1; i++)
        //    {
        //        String[] StringArray1 = StringArray[i].Split('=');

        //        sKey = StringArray1[0];
        //        sValue = HttpUtility.UrlDecode(StringArray1[1]);

        //        // set string vars to hold variable names using a switch
        //        switch (sKey)
        //        {
        //            case "mc_gross":
        //                ph.GrossTotal = Convert.ToDouble(sValue);
        //                break;

        //            case "invoice":
        //                ph.InvoiceNumber = Convert.ToInt32(sValue);
        //                break;

        //            case "payment_status":
        //                ph.PaymentStatus = Convert.ToString(sValue);
        //                break;

        //            case "first_name":
        //                ph.PayerFirstName = Convert.ToString(sValue);
        //                break;

        //            case "mc_fee":
        //                ph.PaymentFee = Convert.ToDouble(sValue);
        //                break;

        //            case "business":
        //                ph.BusinessEmail = Convert.ToString(sValue);
        //                break;

        //            case "payer_email":
        //                ph.PayerEmail = Convert.ToString(sValue);
        //                break;

        //            case "Tx Token":
        //                ph.TxToken = Convert.ToString(sValue);
        //                break;

        //            case "last_name":
        //                ph.PayerLastName = Convert.ToString(sValue);
        //                break;

        //            case "receiver_email":
        //                ph.ReceiverEmail = Convert.ToString(sValue);
        //                break;

        //            case "item_name":
        //                ph.ItemName = Convert.ToString(sValue);
        //                break;

        //            case "mc_currency":
        //                ph.Currency = Convert.ToString(sValue);
        //                break;

        //            case "txn_id":
        //                ph.TransactionId = Convert.ToString(sValue);
        //                break;

        //            case "custom":
        //                ph.Custom = Convert.ToString(sValue);
        //                break;

        //            case "subscr_id":
        //                ph.SubscriberId = Convert.ToString(sValue);
        //                break;
        //        }
        //    }

        //    return ph;
        //}
        //catch (Exception ex)
        //{
        //    throw ex;
        //}

        //ph.PayerCity = "";
        //ph.PayerCountry = "";
        //ph.PayerCountryCode = "";
        //ph.PayerState = "";
        //ph.PayerAddressStatus = "";
        //ph.PayerAddress = "";
        //ph.PayerZipCode = "";
        //ph.PayerFirstName = "";
        //ph.PayerLastName = "";
        //ph.PayerBusinessName = "";
        //ph.PayerEmail = "";
        //ph.PayerID = "";
        //ph.PayerStatus = "";
        //ph.PayerPhone = "";
        //ph.Business = "";
        //ph.ItemName = "";
        //ph.ItemNumber = "";
        //ph.Quantity = "";
        //ph.ReceiverEmail = "";
        //ph.ReceiverID = "";
        //ph.Custom = "";
        //ph.Memo = "";
        //ph.Invoice = "";
        //ph.Tax = "";
        //ph.QuantityCartItems = "";
        //ph.PaymentDate = "";
        //ph.PaymentStatus = "";
        //ph.PaymentType = "";
        //ph.PendingReason = "";
        //ph.TXN_ID = "";
        //ph.TXN_Type = "";
        //ph.PaymentFee = "";
        //ph.PaymentGross = "";
        //ph.NotifyVersion = "";
        //ph.VerifySign = "";



        ph.RequestLength = HttpContext.Current.Request.Params.ToString();

        ph.PayerCity = HttpContext.Current.Request.Params["address_city"];
        ph.PayerCountry = HttpContext.Current.Request.Params["address_country"];
        ph.PayerCountryCode = HttpContext.Current.Request.Params["address_country_code"];
        ph.PayerState = HttpContext.Current.Request.Params["address_state"];
        ph.PayerAddressStatus = HttpContext.Current.Request.Params["address_status"];
        ph.PayerAddress = HttpContext.Current.Request.Params["address_street"];
        ph.PayerZipCode = HttpContext.Current.Request.Params["address_zip"];
        ph.PayerFirstName = HttpContext.Current.Request.Params["first_name"];
        ph.PayerLastName = HttpContext.Current.Request.Params["last_name"];
        ph.PayerBusinessName = HttpContext.Current.Request.Params["payer_business_name"];
        ph.PayerEmail = HttpContext.Current.Request.Params["payer_email"];
        ph.PayerID = HttpContext.Current.Request.Params["payer_id"];
        ph.PayerStatus = HttpContext.Current.Request.Params["payer_status"];
        ph.PayerPhone = HttpContext.Current.Request.Params["contact_phone"];
        ph.Business = HttpContext.Current.Request.Params["business"];
        ph.ItemName = HttpContext.Current.Request.Params["item_name"];
        ph.ItemNumber = HttpContext.Current.Request.Params["item_number"];
        ph.Quantity = HttpContext.Current.Request.Params["quantity"];
        ph.ReceiverEmail = HttpContext.Current.Request.Params["receiver_email"];
        ph.ReceiverID = HttpContext.Current.Request.Params["receiver_id"];
        ph.Custom = HttpContext.Current.Request.Params["custom"];
        ph.Memo = HttpContext.Current.Request.Params["memo"];
        ph.Invoice = HttpContext.Current.Request.Params["invoice"];
        ph.Tax = HttpContext.Current.Request.Params["tax"];
        ph.QuantityCartItems = HttpContext.Current.Request.Params["num_cart_items"];
        ph.PaymentDate = HttpContext.Current.Request.Params["payment_date"];
        ph.PaymentStatus = HttpContext.Current.Request.Params["payment_status"];
        ph.PaymentType = HttpContext.Current.Request.Params["payment_type"];
        ph.PendingReason = HttpContext.Current.Request.Params["pending_reason"];
        ph.TXN_ID = HttpContext.Current.Request.Params["txn_id"];
        ph.TXN_Type = HttpContext.Current.Request.Params["txn_type"];
        ph.PaymentFee = HttpContext.Current.Request.Params["mc_fee"];
        ph.PaymentGross = HttpContext.Current.Request.Params["mc_gross"];
        ph.NotifyVersion = HttpContext.Current.Request.Params["notify_version"];
        ph.VerifySign = HttpContext.Current.Request.Params["verify_sign"];
        ph.Currency = HttpContext.Current.Request.Params["mc_currency"];

        if (ph.Business == null)
        {
            ph.Business = "";
        }





        return ph;
    }


    /// <summary>
    /// This makes the post back to PayPal to verify the order.
    /// </summary>
    //public void MakeHttpPost()
    //{
    //    HttpWebRequest req = (HttpWebRequest)WebRequest.Create(this.PostUrl);

    //    req.Method = "POST";
    //    req.ContentLength = this.RequestLength.Length + 21; 
    //    req.ContentType = "application/x-www-form-urlencoded";
    //    byte[] param = HttpContext.Current.Request.BinaryRead(HttpContext.Current.Request.ContentLength);
    //    this.RequestLength = Encoding.ASCII.GetString(param);
    //    this.RequestLength += "&cmd=_notify-validate";
    //    req.ContentLength = this.RequestLength.Length;

    //    StreamWriter streamOut = new StreamWriter(req.GetRequestStream(), System.Text.Encoding.ASCII);
    //    streamOut.Write(this.RequestLength);
    //    streamOut.Close();
    //    StreamReader streamIn = new StreamReader(req.GetResponse().GetResponseStream());
    //    this.Response = streamIn.ReadToEnd();
    //    streamIn.Close();

    //}

    //#endregion
}


